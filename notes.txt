----------------------------------------------------------------------------------------------------------------------
                                              Resources: 
----------------------------------------------------------------------------------------------------------------------
- https://www.youtube.com/watch?v=6iZiqQZBQJY 5:54 minutes in. 

nodemon app --ext js

----------------------------------------------------------------------------------------------------------------------
                                               TO DO:
----------------------------------------------------------------------------------------------------------------------

create.ejs - 
  + change date input value to show current date
  + turn vocab & quotes input into multi-input
  + add graphic of stars with corresonding results
  + add boxes to select from
index.ejs - 
  + display archived blog posts (newest to oldest) & create multiple pages to view older posts


----------------------------------------------------------------------------------------------------------------------
                                               Plans:
----------------------------------------------------------------------------------------------------------------------

Dual fileSystem - 
  + have an archive json file
    - stores old posts 
  + have a new blog post json file 
    - read file, 
    - convert to object,
    - push data to blogEntries array,
    - convert blogEntries array into json data,
    - write to archive json file

----------------------------------------------------------------------------------------------------------------------
                                            App Functionality:
----------------------------------------------------------------------------------------------------------------------

blog.js - 
  + establishes the Blog class
  + establishes the BlogList class, which is an array of blog(s)
    ^ creates an empty array, blogEntries
    ^ houses the readData() function: 
      ^ reads the blog-data.json file
      ^ parses the json data into an object named blogsData
      ^ the blogEntries array is populated with the result of: 
        each blog in blogsData object is pushed through the createEntry(), setting up its blog properties 
    ^ houses the createEntry(blogData) function:
      ^ blogData is set up with all blog properties
      ^ a new blog in the Blog class is initialized, called blog
      ^ adds a unique identifier as id property if none already exists. 
      ^ all of its property data is added to the corresonding Blog properties
      ^ the blog is returned
  + Blog and BlogList are exported


app.js -
  on app start up: 
    + a new instance of the BlogList class is initialized called blogs
    + readData() is run on blogs


-----------------------------------------------------------------------------------------------------------------------
                                 Removed (to simplify) from create.ejs:
-----------------------------------------------------------------------------------------------------------------------
<div class="form-row">
  <label for="blog-description" class="label"
    >Describe this blog post</label
  >
  <input
    id="blog-description"
    name="blog-description"
    type="text"
    required="required"
  />
</div>

<!-- TO DO: turn vocab & quotes input into multi-input -->
<div class="form-row">
    <label for="new-vocabulary" class="label"
      >Did you learn any new words?</label
    >
    <input
      id="new-vocabulary"
      name="new-vocabulary"
      type="text"
      required="required"
    />
  </div>
  <div class="form-row">
    <label for="new-image" class="label">Add Image</label>
    <input
      id="new-image"
      name="new-image"
      type="file"
      accept="image/png, image/svg, image/jpeg"
      multiple
    />
  </div>
  <div class="form-row">
    <label for="new-quote" class="label">Important Quotes</label>
    <input id="new-quote" name="new-quote" type="text" />
  </div>
      <!-- TO DO: add graphic of stars with corresonding results -->
  <div class="form-row">
    <label for="rating" class="label">How many stars?</label>
    <input
      id="rating"
      name="rating"
      type="image"
      src="#"
      required="required"
    />
  </div>

<div class="form-row">
  <label for="future-reads" class="label">Suggested Future Reads</label>
  <input id="future-reads" name="future-reads" type="text" />
</div> 



-----------------------------------------------------------------------------------------------------------------------
                                 Removed from blogs.js:
-----------------------------------------------------------------------------------------------------------------------

  const updateBlog = (updatedBlogObject, blogObjArray) => {
  // console.log("Updating post");
  // const updatedBlogIndex = blogObjArray.indexOf(updatedBlogObject);
  // const allBlogEntries = blogs.addToEntries(
  //   blogs.createEntry(updatedBlogObject)
  // );
  // allBlogEntries.blogs.forEach((blog) => {
  //   if (updatedBlogIndex == blog.id) {
  //     console.log("blog found");
  //     allBlogEntries.blogs.splice(blog);
  //   }
  // });
  // console.log(allBlogEntries.blogs);
  // const updatedJsonString = blogs.convertObjectToJson(allBlogEntries.blogs);
  // blogs.writeEntry(updatedJsonString);
};




const updatePost = (req, res) => {
  // blogModules.startupPromise
  //   .then((allBlogEntries) => {
  //     blogModules.updateBlog(req.body, allBlogEntries);
  //   })
  //   .then((result) => {
  //     res.json({ redirect: "/blogs" });
  //   })
  //   .catch((err) => {
  //     console.log(err);
  //   });
};

-----------------------------------------------------------------------------------------------------------------------
                                 Author data backup:
-----------------------------------------------------------------------------------------------------------------------

{
    "authors": [
        {
            "id": "de394318-337e-4aa4-be41-9b6b326c637a",
            "name": "Bookson Bookles"
        },
        {
            "id": "e08c0458-7521-406a-b723-fa1a7f12c1f7",
            "name": "Bookup"
        }, 
        {
            "id": "756cb17b-9850-4ec2-9b61-ec3c3df02e40",
            "name": "Nov Novellington"
        },
        {
            "id": "db09b9b7-ae22-4d59-88fe-6b6621c7ac2e",
            "name": "Novel Bookser"
        },
        {
            "id": "45bbf0d2-e001-4df7-b229-af9d2293712b",
            "name": "Novella Novelling"
        }
    ]
}
-----------------------------------------------------------------------------------------------------------------------
                                 blog data backup:
-----------------------------------------------------------------------------------------------------------------------

{
  "blogs": [
    {
      "id": "10",
      "bookTitle": "10",
      "author": "Ursula K. Le Guin",
      "startDate": "09-15-2021",
      "endDate": "",
      "rating": "5",
      "tags": "Fiction",
      "blogContent": "A very good trilogy."
    },
    {
      "id": "9",
      "bookTitle": "9",
      "author": "Ursula K. Le Guin",
      "startDate": "09-15-2021",
      "endDate": "",
      "rating": "5",
      "tags": "Fiction",
      "blogContent": "A very good trilogy."
    },
    {
      "id": "8",
      "bookTitle": "8",
      "author": "Ursula K. Le Guin",
      "startDate": "09-15-2021",
      "endDate": "",
      "rating": "5",
      "tags": "Fiction",
      "blogContent": "A very good trilogy."
    },
    {
      "id": "7",
      "bookTitle": "7",
      "author": "Ursula K. Le Guin",
      "startDate": "09-15-2021",
      "endDate": "",
      "rating": "5",
      "tags": "Fiction",
      "blogContent": "A very good trilogy."
    },
    {
      "id": "6",
      "bookTitle": "6",
      "author": "Ursula K. Le Guin",
      "startDate": "09-15-2021",
      "endDate": "",
      "rating": "5",
      "tags": "Fiction",
      "blogContent": "A very good trilogy."
    },
    {
      "id": "5",
      "bookTitle": "5",
      "author": "Ursula K. Le Guin",
      "startDate": "09-15-2021",
      "endDate": "",
      "rating": "5",
      "tags": "Fiction",
      "blogContent": "A very good trilogy."
    },
    {
      "id": "4",
      "bookTitle": "4",
      "author": "Ursula K. Le Guin",
      "startDate": "09-15-2021",
      "endDate": "",
      "rating": "5",
      "tags": "Fiction",
      "blogContent": "A very good trilogy."
    },
    {
      "id": "6f80a6d4-21b3-46be-a897-7801e4329f52",
      "bookTitle": "3. The Farthest Shore",
      "author": "Ursula K. Le Guin",
      "startDate": "09-15-2021",
      "endDate": "",
      "rating": "5",
      "tags": "Fiction",
      "blogContent": "A very good trilogy."
    },
    {
      "id": "a9746254-2b27-4f7e-9f98-4cef2e9830e3",
      "bookTitle": "2. The Tombs of Atuan",
      "author": "Ursula K. Le Guin",
      "startDate": "08-15-2021",
      "endDate": "09-15-2021",
      "rating": "5",
      "tags": "Fiction",
      "blogContent": "A very good sequel."
    },
    {
      "id": "1",
      "bookTitle": "1. A Wizard of Earthsea",
      "author": "Ursula K. Le Guin",
      "startDate": "07-15-2021",
      "endDate": "08-15-2021",
      "rating": "5",
      "tags": "Fiction",
      "blogContent": "A very good book."
    }
  ]
}

-----------------------------------------------------------------------------------------------------------------------
                                 authors.js extracted:
-----------------------------------------------------------------------------------------------------------------------
  createAuthor(authorObject) {
    let uniqueID = uuidv4();
    // console.log(this.authorDirectory);
    // const includesAuthorObj = this.authorDirectory.authors.includes(authorObject);

    // if (includesAuthorObj == false) {
    if (authorObject.id == undefined) {
      authorObject.id = uniqueID;
    }

    let { id, name, booksWritten, quotes, aboutAuthor } = authorObject;

    let author = new Author(id, name, booksWritten, quotes, aboutAuthor);
    return author;
    // }
  }

  createAuthorsArrayPromise(objectsData) {
    return new Promise((resolve, reject) => {
      if (objectsData != undefined) {
        const objArray = objectsData.blogs;
        const authorArray = [];

        objArray.forEach((element) => {
          const includesAuthor = authorArray.includes(element.author);

          if (includesAuthor == false) {
            authorArray.push(element.author);
          }
        });

        resolve(authorArray);
      } else {
        reject("Error.");
      }
    });
  }

  createMultipleAuthorsPromise(authorArray) {
    return new Promise((resolve, reject) => {
      if (authorArray != undefined) {
        const arrayOfAuthorObjects = [];

        authorArray.map((obj) => {
          let authorObj = {};
          authorObj["name"] = obj;
          arrayOfAuthorObjects.push(authorObj);
        });
        const dumbieDirectory = {
          authors: [],
        };
        dumbieDirectory.authors = arrayOfAuthorObjects.map(this.createAuthor);
        this.authorDirectory.authors = dumbieDirectory.authors;
        resolve(this.authorDirectory);
      } else {
        reject("Error - createMultipleAuthorsPromise");
      }
    });
  }


    createAuthorsArrayPromise(objectsData) {
    return new Promise((resolve, reject) => {
      if (objectsData != undefined) {
        const objArray = objectsData.blogs;
        const authorArray = [];

        objArray.forEach((element) => {
          const includesAuthor = authorArray.includes(element.author);

          if (includesAuthor == false) {
            authorArray.push(element.author);
          }
        });

        resolve(authorArray);
      } else {
        reject("Error.");
      }
    });
  }


  helper

  const fs = require("fs");
const { resolve } = require("path");
const blogModules = require("./modules/blog");
const authorModules = require("./modules/author");

const blogs = new blogModules.BlogList();
const authors = new authorModules.AuthorList();

// Universal Functions:

const readDataPromise = (file) => {
  return new Promise((resolve, reject) => {
    fs.readFile(file, (err, data) => {
      if (err) {
        reject(console.log(err));
      } else {
        console.log("Success - readDataPromise.");
        resolve(data);
      }
    });
  });
};

const convertJsonToObjectPromise = (jsonData) => {
  return new Promise((resolve) => {
    console.log("Success - convertJsonToObjectPromise.");
    const objectsData = JSON.parse(jsonData);
    // console.log(objectsData);
    resolve(objectsData);
  });
};

const convertObjectToJson = (blogObjArray) => {
  console.log("Success - convertObjectToJson.");
  const jsonString = JSON.stringify(blogObjArray, null, 4);
  return jsonString;
};

const writeEntry = (jsonString, file) => {
  return new Promise((resolve) => {
    fs.writeFile(file, jsonString, (err) => {
      if (err) {
        console.log("ERROR writing to files");
      } else {
        resolve("Done writing files");
      }
    });
  });
};

const reverseOrder = (blogObjArray) => {
  const lastBlog = blogObjArray.length - 1;

  if (blogObjArray[lastBlog].id == 1) {
    var reversedResults = blogObjArray;
  } else {
    reversedResults = blogObjArray.reverse();
  }
  // console.log(reversedResults);
  return reversedResults;
};

const startupPromise = new Promise((resolve) => {
  console.log("Success - startupPromise.");
  resolve(
    readDataPromise("data/blog-data.json")
      .then((data) => convertJsonToObjectPromise(data))
      .then((objectsData) => blogs.createMultipleEntriesPromise(objectsData))
      .then((allEntriesArray) => reverseOrder(allEntriesArray))
  );
});

const authorStartupPromise = new Promise((resolve) => {
  resolve(
    readDataPromise("data/author-data.json")
      .then((data) => convertJsonToObjectPromise(data))
      .then((objectsData) => authors.createMultipleAuthorsPromise(objectsData))
  );
});

//////////// End of Universal functions ////////

const createNewBlog = (createdBlogObject) => {
  console.log("Creating new post");
  console.log(createdBlogObject);
  const allBlogEntries = blogs.addToEntries(
    blogs.createEntry(createdBlogObject)
  );

  const authorAdded = authors.checkIfAuthorExists(createdBlogObject);

  console.log(authorAdded);
  const jsonStringAuthor = convertObjectToJson(authorAdded);
  console.log(jsonStringAuthor);
  writeEntry(jsonStringAuthor, "data/author-data.json").then(
    (writtenAuthors) => {
      console.log("Success - writeEnry to Authors");
      const jsonStringBlog = convertObjectToJson(allBlogEntries);
      writeEntry(jsonStringBlog, "data/blog-data.json").then((writenBlogs) => {
        console.log("Success - writeEntry to Blogs");
      });
    }
  );
};

const deleteBlog = (blogObjArray, ID) => {
  blogObjArray.forEach((blog) => {
    if (blog.id == ID) {
      this.blogToDelete = blog;
    }
  });
  const indexOfBlog = blogObjArray.indexOf(this.blogToDelete);

  if (indexOfBlog > -1) {
    blogObjArray.splice(indexOfBlog, 1);
    const updatedArray = blogs.updateAfterModifying(blogObjArray);
    const updatedJsonString = convertObjectToJson(updatedArray);

    writeEntry(updatedJsonString, "data/blog-data.json");
  } else {
    console.log("Error.");
  }
};

const updateBlog = (ID, updatedBlogObject, blogObjArray) => {
  console.log("Updating post");

  blogObjArray.forEach((blog) => {
    if (ID == blog.id) {
      console.log("blog found");

      updatedBlogObject.id = blog.id;
      const updatedBlog = blogs.createEntry(updatedBlogObject);
      const blogToReplaceId = blogObjArray.indexOf(blog);
      blogObjArray.splice(blogToReplaceId, 1, updatedBlog);
    }
  });

  writeEntry(
    convertObjectToJson(blogs.updateAfterModifying(blogObjArray)),
    "data/blog-data.json"
  );
};

///////////////////////////////// Authors ////////////////////////////////

// const writeAuthors = () => {
//   authorStartupPromise.then((allAuthorObjs) => {
//     const json = convertObjectToJson(allAuthorObjs);
//     writeEntry(json, "data/author-data.json");
//   });
// };

// writeAuthors();
//////////////// End of blog functions //////////////////////////////

module.exports = {
  startupPromise,
  authorStartupPromise,
  createNewBlog,
  deleteBlog,
  updateBlog,
};