----------------------------------------------------------------------------------------------------------------------
                                              Resources: 
----------------------------------------------------------------------------------------------------------------------
- https://www.youtube.com/watch?v=6iZiqQZBQJY 5:54 minutes in. 

nodemon app --ext js

----------------------------------------------------------------------------------------------------------------------
                                               TO DO:
----------------------------------------------------------------------------------------------------------------------

create.ejs - 
  + change date input value to show current date
  + turn vocab & quotes input into multi-input
  + add graphic of stars with corresonding results
  + add boxes to select from
index.ejs - 
  + display archived blog posts (newest to oldest) & create multiple pages to view older posts


----------------------------------------------------------------------------------------------------------------------
                                               Plans:
----------------------------------------------------------------------------------------------------------------------

Dual fileSystem - 
  + have an archive json file
    - stores old posts 
  + have a new blog post json file 
    - read file, 
    - convert to object,
    - push data to blogEntries array,
    - convert blogEntries array into json data,
    - write to archive json file

----------------------------------------------------------------------------------------------------------------------
                                            App Functionality:
----------------------------------------------------------------------------------------------------------------------
helper.js - 
  + instansiates a new BlogList and AuthorList
  + houses universal functions:
    ^ readDataPromise()
      - accepts a file name
      - reads data file
      - parses the json-data into object-data
      - returns that object-dat
    ^ writeEntry()
      - accepts and array of objects & a file name
      - converts object-data to json-data
      - writes json-data to file
    ^ reverseOrder()
      - accepts an array of objects
      - reverses their order in relation to id = 1
      - returns the reversed array
    ^ createNewBlog() & createNewAuthor() ** could be combined? * add trim() **
    ^ deleteBlog()
      - accepts array of objects
      - removes the desired blog
      - calls blogs.updateAfterModifying() on updated array of objects
      - calls writeEntry() on updated array of objects 
      - no return
    ^ updateBlog() & modifyAuthor() ** could be combined? **
    
  + startup-promises: 
    ^ startupPromise
      - readDataPromise(blog-data.json)
      - then blogs.createMultipleAuthorsPromise()
      - then reverseOrder()
      - resolves the array of blog objects
    ^ authorStartupPromise
      - readDataPromise(author-data.json)
      - then authors.createMultipleAuthorsPromise()
      - resolves the array of author objects
    ^ allPurposeStartUp
      - runs both blog and author startup promises
      - stores both arrays in an object as properties
      - when properties are called they return an array of either blog or author data
      - returns that object 


blog.js - 
  + establishes the Blog class
    - constructs all properties of the Blog class:
      id,
      blogPost, * could add for distinction? 
      bookTitle, 
      author, * could change to authorName?
      startDate,
      endDate,
      rating, 
      tags,
      blogContent
  + establishes the BlogList class
    - constructs blogEntries, which is an empty object with a blogs property set to an empty array
    - methods:
      ^ createEntry()
        - instansiates a new Blog class
        - generates a new unique id, if one doesn't already exist
        - returns the new blog object
      ^ createMultipleEntriesPromise()
        - accepts an array of blog objects
        - runs each blog object through createEntry()
        - the resulting array is set equal to the blogEntries.blogs array, established by the BlogList class
        - resolves blogEntries.blogs array
      ^ addToEntries()
        - accepts a (newly created) blog object
        - adds it to the beginning of blogEntries.blogs array
        - returns blogEntries object
      ^ updateAfterModifying()
        - accepts (updated) blog object array
        - sets that array equal to blogEntries.blogs array
        - returns blogEntries object
  + exports: Blog and BlogList


app.js -
  on app start up: 
    + a new instance of the BlogList class is initialized called blogs
    + readData() is run on blogs

authors - 
  + must create function to merge the siteData.allBlogData and siteData.allAuthorData
  + author.booksWritten should be an array of objects:
    ^ example:
      {
        "authors": [
          {
            "name": "Ursula K. Le Guin",
            "booksWritten": [
              {
                bookTitle: "1. A Wizard of Earthsea"
                bookTitle.id: "1"
              },
              {
                bookTitle: "2. The Tombs of Atuan"
                bookTitle.id: "2"
              }
              ],
            "quotes": [],
            "aboutAuthor": "",
            "id": ""
          }
        ]
      }



-----------------------------------------------------------------------------------------------------------------------
                                 After data purge:
-----------------------------------------------------------------------------------------------------------------------

authorDetails.ejs - 
  ^ the last of the listed books written links to its blog page
  ^ edit button reloads authorDetails pages because I didn't give the author an id.
  ^ when the author data is read, it did not give a new id to the author 
    - fixed by adding id to json file. 
    - this is only necessary during testing because I will never add an author manually. only from blog entry.

editAuthor.ejs -
  EITHER: you should not be able to edit the booksWritten field 
    or
  CONCEPT: 
    ^ you could add other booksWritten to author-data.json
      + a new blog post would need to be created, including: id, bookTitle, authorName, hasBeenRead - save to blog-data.json. 

editBlog.ejs - 
  ^ if authorName / bookTitle is edited then the author-data.json should be updated to match.

createBlog -
  ^ could have a post title and a separate bookTitle field
    - that way bookTitle becomes more of a property of the post
